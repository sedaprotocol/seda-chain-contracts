// @generated
// This file is @generated by prost-build.
/// OracleProgram is a wasm used for data request.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OracleProgram {
    #[prost(bytes="bytes", tag="1")]
    pub hash: ::prost::bytes::Bytes,
    #[prost(bytes="bytes", tag="2")]
    pub bytecode: ::prost::bytes::Bytes,
    #[prost(message, optional, tag="3")]
    pub added_at: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for OracleProgram {
const NAME: &'static str = "OracleProgram";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.OracleProgram".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.OracleProgram".into() }}
/// Params to define the max wasm size allowed.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Params {
    /// MaxWasmSize specifies the maximum allowed size of an unzipped oracle
    /// program.
    #[prost(int64, tag="1")]
    pub max_wasm_size: i64,
    /// WasmCostPerByte is the cost per unzipped byte of uploading an oracle
    /// program in aseda.
    #[prost(uint64, tag="2")]
    pub wasm_cost_per_byte: u64,
}
impl ::prost::Name for Params {
const NAME: &'static str = "Params";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.Params".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.Params".into() }}
/// GenesisState defines wasm-storage module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, optional, tag="1")]
    pub params: ::core::option::Option<Params>,
    #[prost(message, repeated, tag="2")]
    pub oracle_programs: ::prost::alloc::vec::Vec<OracleProgram>,
    #[prost(string, tag="3")]
    pub core_contract_registry: ::prost::alloc::string::String,
}
impl ::prost::Name for GenesisState {
const NAME: &'static str = "GenesisState";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.GenesisState".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.GenesisState".into() }}
/// The request message for QueryOracleProgram RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOracleProgramRequest {
    #[prost(string, tag="1")]
    pub hash: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryOracleProgramRequest {
const NAME: &'static str = "QueryOracleProgramRequest";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.QueryOracleProgramRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.QueryOracleProgramRequest".into() }}
/// The response message for QueryOracleProgram RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOracleProgramResponse {
    #[prost(message, optional, tag="1")]
    pub oracle_program: ::core::option::Option<OracleProgram>,
}
impl ::prost::Name for QueryOracleProgramResponse {
const NAME: &'static str = "QueryOracleProgramResponse";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.QueryOracleProgramResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.QueryOracleProgramResponse".into() }}
/// The request message for QueryOraclePrograms RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOracleProgramsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag="1")]
    pub pagination: ::core::option::Option<::cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest>,
}
impl ::prost::Name for QueryOracleProgramsRequest {
const NAME: &'static str = "QueryOracleProgramsRequest";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.QueryOracleProgramsRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.QueryOracleProgramsRequest".into() }}
/// The response message for QueryOraclePrograms RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryOracleProgramsResponse {
    #[prost(string, repeated, tag="1")]
    pub list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag="2")]
    pub pagination: ::core::option::Option<::cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse>,
}
impl ::prost::Name for QueryOracleProgramsResponse {
const NAME: &'static str = "QueryOracleProgramsResponse";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.QueryOracleProgramsResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.QueryOracleProgramsResponse".into() }}
/// The request message for QueryCoreContractRegistry RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryCoreContractRegistryRequest {
}
impl ::prost::Name for QueryCoreContractRegistryRequest {
const NAME: &'static str = "QueryCoreContractRegistryRequest";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.QueryCoreContractRegistryRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.QueryCoreContractRegistryRequest".into() }}
/// The response message for QueryCoreContractRegistry RPC.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryCoreContractRegistryResponse {
    #[prost(string, tag="1")]
    pub address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryCoreContractRegistryResponse {
const NAME: &'static str = "QueryCoreContractRegistryResponse";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.QueryCoreContractRegistryResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.QueryCoreContractRegistryResponse".into() }}
/// QueryParamsRequest is the request type for the Query/Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {
}
impl ::prost::Name for QueryParamsRequest {
const NAME: &'static str = "QueryParamsRequest";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.QueryParamsRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.QueryParamsRequest".into() }}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params defines the parameters of the module.
    #[prost(message, optional, tag="1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
const NAME: &'static str = "QueryParamsResponse";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.QueryParamsResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.QueryParamsResponse".into() }}
/// The request message for the StoreOracleProgram method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgStoreOracleProgram {
    #[prost(string, tag="1")]
    pub sender: ::prost::alloc::string::String,
    /// Wasm is the wasm program to store as gzip-compressed bytes.
    #[prost(bytes="bytes", tag="2")]
    pub wasm: ::prost::bytes::Bytes,
    /// StorageFee is the fee incurred for storing the unzipped wasm bytes.
    #[prost(message, repeated, tag="3")]
    pub storage_fee: ::prost::alloc::vec::Vec<::cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for MsgStoreOracleProgram {
const NAME: &'static str = "MsgStoreOracleProgram";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.MsgStoreOracleProgram".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.MsgStoreOracleProgram".into() }}
/// The response message for the StoreOracleProgram method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgStoreOracleProgramResponse {
    #[prost(string, tag="1")]
    pub hash: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgStoreOracleProgramResponse {
const NAME: &'static str = "MsgStoreOracleProgramResponse";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.MsgStoreOracleProgramResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.MsgStoreOracleProgramResponse".into() }}
/// The request message for the InstantiateCoreContract method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgInstantiateCoreContract {
    #[prost(string, tag="1")]
    pub sender: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub admin: ::prost::alloc::string::String,
    #[prost(uint64, tag="3")]
    pub code_id: u64,
    #[prost(string, tag="4")]
    pub label: ::prost::alloc::string::String,
    #[prost(bytes="bytes", tag="5")]
    pub msg: ::prost::bytes::Bytes,
    #[prost(message, repeated, tag="6")]
    pub funds: ::prost::alloc::vec::Vec<::cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    #[prost(bytes="bytes", tag="7")]
    pub salt: ::prost::bytes::Bytes,
    #[prost(bool, tag="8")]
    pub fix_msg: bool,
}
impl ::prost::Name for MsgInstantiateCoreContract {
const NAME: &'static str = "MsgInstantiateCoreContract";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.MsgInstantiateCoreContract".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.MsgInstantiateCoreContract".into() }}
/// The response message for the InstantiateCoreContract method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgInstantiateCoreContractResponse {
    #[prost(string, tag="1")]
    pub contract_address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgInstantiateCoreContractResponse {
const NAME: &'static str = "MsgInstantiateCoreContractResponse";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.MsgInstantiateCoreContractResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.MsgInstantiateCoreContractResponse".into() }}
/// The request message for the UpdateParams method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// Authority is the address that controls the module (defaults to x/gov unless
    /// overwritten).
    #[prost(string, tag="1")]
    pub authority: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
const NAME: &'static str = "MsgUpdateParams";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.MsgUpdateParams".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.MsgUpdateParams".into() }}
/// The response message for the UpdateParams method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {
}
impl ::prost::Name for MsgUpdateParamsResponse {
const NAME: &'static str = "MsgUpdateParamsResponse";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.MsgUpdateParamsResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.MsgUpdateParamsResponse".into() }}
/// The request message for the MsgRefundTxFee method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRefundTxFee {
    /// Authority is the address that controls the method.
    #[prost(string, tag="1")]
    pub authority: ::prost::alloc::string::String,
    /// DrId is the hex-encoded data request ID.
    #[prost(string, tag="2")]
    pub dr_id: ::prost::alloc::string::String,
    /// PublicKey is the hex-encoded public key (identifier) of the executor.
    #[prost(string, tag="3")]
    pub public_key: ::prost::alloc::string::String,
    /// IsReveal is true for a reveal message and false for a commit message.
    #[prost(bool, tag="4")]
    pub is_reveal: bool,
}
impl ::prost::Name for MsgRefundTxFee {
const NAME: &'static str = "MsgRefundTxFee";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.MsgRefundTxFee".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.MsgRefundTxFee".into() }}
/// The response message for the MsgRefundTxFee method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgRefundTxFeeResponse {
}
impl ::prost::Name for MsgRefundTxFeeResponse {
const NAME: &'static str = "MsgRefundTxFeeResponse";
const PACKAGE: &'static str = "sedachain.wasm_storage.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.wasm_storage.v1.MsgRefundTxFeeResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.wasm_storage.v1.MsgRefundTxFeeResponse".into() }}
include!("sedachain.wasm_storage.v1.tonic.rs");
// @@protoc_insertion_point(module)