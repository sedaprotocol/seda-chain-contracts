// @generated
// This file is @generated by prost-build.
/// IndexPubKeyPair defines an index - public key pair.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexedPubKey {
    #[prost(uint32, tag="1")]
    pub index: u32,
    #[prost(bytes="bytes", tag="2")]
    pub pub_key: ::prost::bytes::Bytes,
}
impl ::prost::Name for IndexedPubKey {
const NAME: &'static str = "IndexedPubKey";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.IndexedPubKey".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.IndexedPubKey".into() }}
/// ProvingScheme defines a proving scheme.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ProvingScheme {
    /// index is the SEDA key index.
    #[prost(uint32, tag="1")]
    pub index: u32,
    /// is_activated indicates if the proving scheme has been activated.
    #[prost(bool, tag="2")]
    pub is_activated: bool,
    /// activation_height is the height at which the proving scheme is to
    /// be activated. This field is set to -1 by default until the public
    /// key registration rate reaches the activation threshold and is reset
    /// if the public key registration rate goes below the threshold before
    /// the scheme is activated.
    #[prost(int64, tag="3")]
    pub activation_height: i64,
}
impl ::prost::Name for ProvingScheme {
const NAME: &'static str = "ProvingScheme";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.ProvingScheme".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.ProvingScheme".into() }}
/// Params defines the parameters for the pubkey module.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Params {
    /// activation_block_delay is the number of blocks to wait before activating a
    /// proving scheme.
    #[prost(int64, tag="1")]
    pub activation_block_delay: i64,
    /// activation_threshold_percent is the percentage of the total voting power
    /// that is required to activate a proving scheme.
    #[prost(uint32, tag="2")]
    pub activation_threshold_percent: u32,
}
impl ::prost::Name for Params {
const NAME: &'static str = "Params";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.Params".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.Params".into() }}
/// GenesisState defines pubkey module's genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    #[prost(message, optional, tag="1")]
    pub params: ::core::option::Option<Params>,
    #[prost(message, repeated, tag="2")]
    pub validator_pub_keys: ::prost::alloc::vec::Vec<ValidatorPubKeys>,
    #[prost(message, repeated, tag="3")]
    pub proving_schemes: ::prost::alloc::vec::Vec<ProvingScheme>,
}
impl ::prost::Name for GenesisState {
const NAME: &'static str = "GenesisState";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.GenesisState".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.GenesisState".into() }}
/// ValidatorPubKeys defines a validator's list of registered public keys
/// primarily used in the x/pubkey genesis state.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidatorPubKeys {
    #[prost(string, tag="1")]
    pub validator_addr: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub indexed_pub_keys: ::prost::alloc::vec::Vec<IndexedPubKey>,
}
impl ::prost::Name for ValidatorPubKeys {
const NAME: &'static str = "ValidatorPubKeys";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.ValidatorPubKeys".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.ValidatorPubKeys".into() }}
/// QueryParamsRequest is the request type for the Query/Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {
}
impl ::prost::Name for QueryParamsRequest {
const NAME: &'static str = "QueryParamsRequest";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.QueryParamsRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.QueryParamsRequest".into() }}
/// QueryParamsResponse is the response type for the Query/Params RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params defines the parameters of the module.
    #[prost(message, optional, tag="1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
const NAME: &'static str = "QueryParamsResponse";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.QueryParamsResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.QueryParamsResponse".into() }}
/// QueryValidatorKeysRequest is request type for the Query/ValidatorKeys
/// RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorKeysRequest {
    #[prost(string, tag="1")]
    pub validator_addr: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryValidatorKeysRequest {
const NAME: &'static str = "QueryValidatorKeysRequest";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.QueryValidatorKeysRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.QueryValidatorKeysRequest".into() }}
/// QueryValidatorKeysResponse is response type for the Query/ValidatorKeys
/// RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorKeysResponse {
    #[prost(message, optional, tag="1")]
    pub validator_pub_keys: ::core::option::Option<ValidatorPubKeys>,
}
impl ::prost::Name for QueryValidatorKeysResponse {
const NAME: &'static str = "QueryValidatorKeysResponse";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.QueryValidatorKeysResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.QueryValidatorKeysResponse".into() }}
/// QueryProvingSchemesRequest is request type for the Query/ProvingSchemes
/// RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryProvingSchemesRequest {
}
impl ::prost::Name for QueryProvingSchemesRequest {
const NAME: &'static str = "QueryProvingSchemesRequest";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.QueryProvingSchemesRequest".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.QueryProvingSchemesRequest".into() }}
/// QueryProvingSchemesResponse is response type for the Query/ProvingSchemes
/// RPC method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryProvingSchemesResponse {
    #[prost(message, repeated, tag="1")]
    pub proving_schemes: ::prost::alloc::vec::Vec<ProvingScheme>,
}
impl ::prost::Name for QueryProvingSchemesResponse {
const NAME: &'static str = "QueryProvingSchemesResponse";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.QueryProvingSchemesResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.QueryProvingSchemesResponse".into() }}
/// MsgAddKey defines a message for registering a new public key.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAddKey {
    #[prost(string, tag="1")]
    pub validator_addr: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub indexed_pub_keys: ::prost::alloc::vec::Vec<IndexedPubKey>,
}
impl ::prost::Name for MsgAddKey {
const NAME: &'static str = "MsgAddKey";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.MsgAddKey".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.MsgAddKey".into() }}
/// MsgAddKeyResponse defines the Msg/MsgAddKey response type.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgAddKeyResponse {
}
impl ::prost::Name for MsgAddKeyResponse {
const NAME: &'static str = "MsgAddKeyResponse";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.MsgAddKeyResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.MsgAddKeyResponse".into() }}
/// The request message for the UpdateParams method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless
    /// overwritten).
    #[prost(string, tag="1")]
    pub authority: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
const NAME: &'static str = "MsgUpdateParams";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.MsgUpdateParams".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.MsgUpdateParams".into() }}
/// The response message for the UpdateParams method.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {
}
impl ::prost::Name for MsgUpdateParamsResponse {
const NAME: &'static str = "MsgUpdateParamsResponse";
const PACKAGE: &'static str = "sedachain.pubkey.v1";
fn full_name() -> ::prost::alloc::string::String { "sedachain.pubkey.v1.MsgUpdateParamsResponse".into() }fn type_url() -> ::prost::alloc::string::String { "/sedachain.pubkey.v1.MsgUpdateParamsResponse".into() }}
include!("sedachain.pubkey.v1.tonic.rs");
// @@protoc_insertion_point(module)