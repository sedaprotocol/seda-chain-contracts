on:
  workflow_dispatch:
    inputs:
      network:
        type: choice
        options:
          - devnet
          - testnet
      contract:
        type: choice
        options:
          - proxy_contract
          - data_requests
          - staking
      password:
        required: true
      proxy:
        required: false

name: Deploy SEDA Contract

jobs:
  check_pass:
    name: Check password
    runs-on: ubuntu-latest
    outputs:
      is_allowed: ${{ steps.check.outputs.is_allowed }}
    steps:
      - id: check
        run: |
          password=${{ secrets.CI_PASSWORD }}
          if [[ "${{ github.event.inputs.password }}" == "${password}" ]]; then
            echo "is_allowed=true" >> $GITHUB_OUTPUT
          else
            echo "is_allowed=false" >> $GITHUB_OUTPUT
          fi

  check_proxy:
    name: Check Proxy
    runs-on: ubuntu-latest
    outputs:
      proxy_ok: ${{ steps.check_proxy.outputs.proxy_ok }}
    steps:
      - id: check_proxy
        run: |
          if [[ "${{ github.event.inputs.contract }}" != "proxy_contract" && -z "${{github.event.inputs.proxy }}" ]]; then
            echo "proxy_ok=false" >> $GITHUB_OUTPUT
          else
            echo "proxy_ok=true" >> $GITHUB_OUTPUT
          fi

  deploys:
    needs: [check_pass, check_proxy]
    if: ${{ needs.check_pass.outputs.is_allowed == 'true' && needs.check_proxy.outputs.proxy_ok == 'true' }}
    name: Deploy
    environment:
      name: ${{ github.event.inputs.network }}
    runs-on: ubuntu-latest
    steps:
      - name: Output Contract Name
        run: |
          echo "Contract is ${{ github.event.inputs.contract }}"

      - name: Set Environment Variables
        run: |
          echo "NODE_URL=${{ secrets.NODE_URL }}" >> $GITHUB_ENV
          echo "DEV_ACCOUNT=${{ secrets.DEV_ACCOUNT }}" >> $GITHUB_ENV
          echo "KEYRING_FILE_ID=${{ secrets.KEYRING_FILE_ID }}" >> $GITHUB_ENV
          echo "CHAIN_ID=seda-${{ github.event.inputs.network }}" >> $GITHUB_ENV
          echo "MNEMONIC=${{ secrets.MNEMONIC }}" >> $GITHUB_ENV

      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.72.1
          target: wasm32-unknown-unknown

      - name: Compile optimized WASM contract
        run: |
          docker run --rm -v $GITHUB_WORKSPACE:/code \
          --mount type=volume,source=contract_cache,target=/code/target \
          --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \
          cosmwasm/rust-optimizer:0.14.0

      - name: Download seda-chaind binary
        uses: jaxxstorm/action-install-gh-release@v1.10.0
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repo: sedaprotocol/seda-chain

      - name: Move seda-chaind to current directory
        run: |
          cp /opt/hostedtoolcache/sedaprotocol/seda-chain/latest/linux-x64/seda-chaind .

      - name: Import key
        env:
          MNEMONIC: ${{ env.MNEMONIC }}
        run: |
          sudo apt-get install -y expect
          output=$(expect -c "
            spawn ./seda-chaind keys add dev_account --recover --keyring-backend test --keyring-dir .
            expect {
              \"> Enter your bip39 mnemonic\" {
                send \"$MNEMONIC\r\"
              }
              timeout {
                send_user \"Timed out waiting for enter mnemonic prompt\r\"
                exit 1
              }
            }
            expect eof
          ")
          echo "$output"


      - name: Store contract on chain
        env:
          DEV_ACCOUNT: ${{ env.DEV_ACCOUNT }}
          CHAIN_ID: ${{ env.CHAIN_ID }}
        id: store
        run: |
          nodeUrl=${{ env.NODE_URL }}
          devAccount=${{ env.DEV_ACCOUNT }}
          chainId=${{ env.CHAIN_ID }}
          OUTPUT="$(./seda-chaind tx wasm store ./artifacts/${{ github.event.inputs.contract }}.wasm --node ${nodeUrl} --from ${devAccount} --keyring-dir . --keyring-backend test --chain-id=${chainId} --gas-prices 0.1aseda --gas auto --gas-adjustment 1.3 -y --output json)"
          TXHASH=$(echo $OUTPUT | jq -r '.txhash')
          echo "Store transaction is $TXHASH"
          echo "txhash=$TXHASH" >> $GITHUB_ENV

      - name: Wait for the transaction to be included in a block
        run: sleep 12

      - name: Find the code ID
        id: query
        run: |
          nodeUrl=${{ env.NODE_URL }}
          OUTPUT="$(./seda-chaind query tx ${{ env.txhash }} --node ${nodeUrl} --output json)"
          CODE_ID=$(echo "$OUTPUT" | jq -r '.logs[].events[] | select(.type=="store_code") | .attributes[] | select(.key=="code_id") | .value')
          echo "Code ID is $CODE_ID"
          echo "code_id=$CODE_ID" >> $GITHUB_ENV

      - name: Instantiate contract
        env:
          DEV_ACCOUNT: ${{ env.DEV_ACCOUNT }}
          CHAIN_ID: ${{ env.CHAIN_ID }}
        id: instantiate
        run: |
          nodeUrl=${{ env.NODE_URL }}
          devAccount=${{ env.DEV_ACCOUNT }}
          chainId=${{ env.CHAIN_ID }}
          if [[ "${{ github.event.inputs.contract }}" != "proxy_contract" ]]; then
            proxy=${{ github.event.inputs.proxy }}
            OUTPUT=$(./seda-chaind tx wasm instantiate ${{ env.code_id }} '{"token":"aseda", "proxy": ${{ toJSON(github.event.inputs.proxy) }} }' --no-admin --from ${devAccount} --node ${nodeUrl} --keyring-dir . --keyring-backend test --chain-id=${chainId} --label ${{ env.code_id }} --gas-prices 0.1aseda --gas auto --gas-adjustment 1.3 -y --output json)
          else
            OUTPUT=$(./seda-chaind tx wasm instantiate ${{ env.code_id }} '{"token":"aseda"}' --no-admin --from ${devAccount} --node ${nodeUrl} --keyring-dir . --keyring-backend test --chain-id=${chainId} --label ${{ env.code_id }} --gas-prices 0.1aseda --gas auto --gas-adjustment 1.3 -y --output json)
          fi
          TXHASH=$(echo "$OUTPUT" | jq -r '.txhash')
          echo "Instantiate transaction is $TXHASH"
          echo "txhash=$TXHASH" >> $GITHUB_ENV

      - name: Wait for the transaction to be included in a block
        run: sleep 12

      - name: Find the contract address
        run: |
          nodeUrl=${{ env.NODE_URL }}
          OUTPUT="$(./seda-chaind query tx ${{ env.txhash }} --node ${nodeUrl} --output json)"
          CONTRACT_ADDRESS=$(echo "$OUTPUT" | jq -r '.logs[].events[] | select(.type=="instantiate") | .attributes[] | select(.key=="_contract_address") | .value')
          echo "Contract address is $CONTRACT_ADDRESS"
